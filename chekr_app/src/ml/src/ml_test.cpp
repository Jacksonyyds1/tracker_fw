#include <zephyr/shell/shell.h>
#include <zephyr/fs/fs.h>
#include <zephyr/logging/log_ctrl.h>
#include <zephyr/logging/log.h>
#include <vector>

#include "baseLib.hpp"
#include "ml.h"
#include "storage.h"
#include "utils.h"

// test vectors from PTC 'DogCollar_EdgePackage 3.1.0' app
std::vector<float> trot_sample15_16_17 = {
	-0.296703994, -1.467903972, -0.632448018, -51.52000046, 34.72000122,  -175.8399963,
	0.679296017,  -1.06188798,  -0.015616,    -154.5599976, -115.3600006, 230.7200012,
	-2.857728004, 0.741760015,  -2.717184067, -81.76000214, 59.36000061,  193.7599945,
	-0.304511994, -0.788608015, -0.874495983, 157.9199982,  -24.63999939, -232.9600067,
	0.609023988,  -1.03846395,  -0.015616,    3.359999895,  -114.2399979, -200.4799957,
	-0.843263984, 0.163967997,  -0.51532799,  -255.3600006, -87.36000061, 190.3999939,
	-2.131583929, -0.702719986, -1.616255999, -253.1199951, 124.3199997,  134.3999939,
	-0.726144016, -1.444479942, -1.389824033, -123.1999969, 157.9199982,  -422.2399902,
	0.062463999,  -1.007231951, -0.757376015, -300.1600037, -54.88000107, -350.5599976,
	-0.320127994, -0.366975993, -0.163967997, -352.7999878, -101.9199982, -34.72000122,
	-2.06131196,  0.109311998,  -2.186239958, -282.2399902, -42.56000137, 232.9600067,
	-0.952575982, -0.179583997, -1.046272039, -45.91999817, -161.2799988, 61.59999847,
	-0.780799985, 0.257663995,  -0.070271999, -201.6000061, -34.72000122, 86.23999786,
	-0.124927998, 1.100927949,  0.413823992,  -212.8000031, 184.8000031,  105.2799988,
	-0.796415985, -0.265471995, -0.546559989, -20.15999985, 76.16000366,  -58.24000168,
	-0.968191981, -0.039039999, -1.03846395,  -191.5200043, -7.840000153, -28,
	-0.351359993, 0.296703994,  -0.359167993, -173.6000061, 22.39999962,  -41.43999863,
	-1.53036797,  0.288895994,  -0.554368019, -105.2799988, 52.63999939,  22.39999962,
	-1.444479942, 0.132735997,  -0.593407989, -47.04000092, 50.40000153,  -19.04000092,
	-0.999423981, 0.445055991,  -0.257663995, -47.04000092, 31.36000061,  45.91999817,
	0.015616,     -0.265471995, 0.632448018,  54.88000107,  23.52000046,  134.3999939,
	-1.374207973, 0.648064017,  -0.148351997, 208.3200073,  -106.4000015, 219.5200043,
	-0.257663995, -0.023424,    -0.406015992, 247.5200043,  -250.8800049, 124.3199997,
	-1.733376026, -0.632448018, -1.155583978, 89.59999847,  -73.91999817, 21.28000069,
	-2.05350399,  0.335743994,  0.757376015,  192.6399994,  -33.59999847, 76.16000366,
	-0.078079998, -0.249855995, -0.320127994, 203.8399963,  -6.71999979,  81.76000214,
	-1.717759967, 0.327935994,  -1.257087946, 69.44000244,  13.43999958,  -12.31999969,
	-1.06969595,  -0.491903991, 0.632448018,  -54.88000107, 36.95999908,  -29.12000084,
	-0.484095991, 0.070271999,  -1.124351978, -35.84000015, 78.40000153,  -8.960000038,
	-0.585600019, -0.179583997, -0.710528016, -34.72000122, -90.72000122, -76.16000366,
	-1.093119979, -0.078079998, -1.007231951, -30.23999977, 56,           -53.75999832,
	-1.51475203,  0.585600019,  0.039039999,  191.5200043,  115.3600006,  142.862400055,
	-0.281087995, -1.100927949, -0.51532799,  263.2000122,  -69.44000244, 244.1600037,
	-0.124927998, -0.476287991, -0.843263984, 63.84000015,  -131.0399933, 161.2799988,
	-1.936383963, 0.140543997,  -0.249855995, 247.5200043,  -26.87999916, 174.7200012,
	-0.132735997, 0.015616,     -0.601216018, 210.5599976,  -10.07999992, 132.1600037,
	-2.131583929, 0.085887998,  -0.679296017, 169.1199951,  -31.36000061, 80.63999939,
	-0.788608015, -0.093695998, 0.085887998,  90.72000122,  29.12000084,  113.1200027,
	-0.593407989, -0.054655999, -0.366975993, -16.79999924, -23.52000046, 84,
	-1.881728053, 0.374783993,  -0.249855995, 94.08000183,  -64.95999908, 39.20000076,
	0.296703994,  0.148351997,  -0.687103987, 99.68000031,  60.47999954,  25.76000023,
	-1.788032055, 0.335743994,  -0.50752002,  140,          -21.28000069, 48.15999985,
	-0.976000011, 0.390399992,  -0.562175989, 181.4400024,  -51.52000046, 136.6399994,
	-0.601216018, -0.406015992, -0.843263984, 32.47999954,  -69.44000244, 68.31999969,
	-1.405439973, 0.49971199,   -0.085887998, 106.4000015,  -60.47999954, 109.7600021};
std::vector<float> walk_sample27_28_29 = {
	-0.51532799,  -0.452863991, -0.452863991, -122.0800018, -61.59999847, 14.56000042,
	-1.02284801,  -0.632448018, -0.343551993, -176.9600067, -12.31999969, -24.63999939,
	-1.100927949, -0.593407989, -0.296703994, -171.3600006, 14.56000042,  3.359999895,
	-0.312319994, -0.538752019, -0.569984019, -189.2799988, -151.1999969, -22.39999962,
	-1.132159948, -0.546559989, -0.148351997, -211.6799927, -126.5599976, -22.39999962,
	-1.366400003, -0.601216018, -0.50752002,  -197.1199951, -23.52000046, 31.36000061,
	-0.733951986, -0.124927998, -0.163967997, -201.6000061, -73.91999817, 8.960000038,
	-0.655871987, -0.343551993, -0.062463999, -159.0399933, -136.6399994, -47.04000092,
	-0.843263984, -0.616832018, 0.054655999,  -59.36000061, -62.72000122, -26.87999916,
	-1.179008007, -0.132735997, -0.335743994, -34.72000122, 47.04000092,  -34.72000122,
	-0.726144016, -0.437247992, -0.468479991, -30.23999977, 58.24000168,  11.19999981,
	-0.819840014, -0.242047995, 0.101503998,  -71.68000031, -57.11999893, 14.56000042,
	-1.264896035, -0.538752019, -0.187391996, -67.19999695, -20.15999985, -23.52000046,
	-0.640255988, -0.991616011, -0.609023988, -154.5599976, -89.59999847, -39.20000076,
	-0.49971199,  -0.468479991, 0.023424,     -119.8399963, -126.5599976, 26.87999916,
	-0.624639988, -0.085887998, -0.913536012, 8.960000038,  -8.960000038, 17.92000008,
	-0.50752002,  -0.163967997, -0.960384011, 33.59999847,  -22.39999962, 62.72000122,
	-0.609023988, -0.163967997, -0.788608015, 43.68000031,  -12.31999969, 78.40000153,
	-0.359167993, -0.320127994, -0.983807981, 76.16000366,  2.24000001,   73.91999817,
	-0.694912016, -0.163967997, -0.788608015, 98.55999756,  10.07999992,  66.08000183,
	-0.788608015, -0.242047995, -0.897920012, 136.6399994,  30.23999977,  80.63999939,
	-0.679296017, -0.374783993, -0.796415985, 128.8000031,  7.840000153,  78.40000153,
	-0.562175989, -0.49971199,  -0.804224014, 92.95999908,  -21.28000069, 53.75999832,
	-0.671487987, -0.601216018, -0.819840014, 44.79999924,  -8.960000038, 23.52000046,
	-0.694912016, -0.382591993, -0.772992015, 5.599999905,  22.39999962,  19.04000092,
	-0.632448018, -0.343551993, -0.796415985, -13.43999958, 16.79999924,  28,
	-0.733951986, -0.203007996, -0.671487987, -36.95999908, -3.359999895, 36.95999908,
	-0.632448018, -0.218623996, -0.835456014, -38.08000183, -33.59999847, 16.79999924,
	-0.413823992, -0.327935994, -0.772992015, -42.56000137, -28,          -33.59999847,
	-0.484095991, -0.359167993, -0.843263984, -31.36000061, 7.840000153,  -82.87999725,
	-0.624639988, -0.390399992, -0.624639988, 7.840000153,  16.79999924,  -116.4800034,
	-0.577791989, -0.562175989, -0.624639988, 73.91999817,  -16.79999924, -95.19999695,
	-0.710528016, -0.585600019, -0.624639988, 108.6399994,  -39.20000076, -70.55999756,
	-0.569984019, -0.741760015, -0.49971199,  94.08000183,  -41.43999863, -58.24000168,
	-0.632448018, -0.843263984, -0.429439992, 67.19999695,  -33.59999847, -42.56000137,
	-0.50752002,  -0.835456014, -0.351359993, 39.20000076,  -29.12000084, -22.39999962,
	-0.421631992, -0.835456014, -0.390399992, 23.52000046,  -15.68000031, -13.43999958,
	-0.593407989, -0.694912016, -0.366975993, -6.71999979,  6.71999979,   -14.56000042,
	-0.538752019, -0.765183985, -0.49971199,  -12.31999969, 16.79999924,  0,
	-0.491903991, -0.874495983, -0.406015992, -20.15999985, 4.480000019,  10.07999992,
	-0.429439992, -0.804224014, -0.460671991, -19.04000092, 7.840000153,  5.599999905,
	-0.577791989, -0.710528016, -0.468479991, -12.31999969, 11.19999981,  1.120000005,
	-0.484095991, -0.741760015, -0.546559989, -21.28000069, 13.43999958,  10.07999992,
	-0.52313602,  -0.741760015, -0.52313602,  -39.20000076, 5.599999905,  14.56000042,
	-0.538752019, -0.648064017, -0.52313602,  -43.68000031, 11.19999981,  3.359999895};

LOG_MODULE_REGISTER(ml_test, LOG_LEVEL_DBG);

static void feed_vectors(std::vector<float> *ptr_vector)
{
	size_t readings = ptr_vector->size() / NUM_FLOATS_PER_IMU_SAMPLE;
	int sample_count = 0;

	for (size_t i = 0; i < readings; i++) {
		imu_sample_t sample = {0};
		sample.timestamp = utils_get_currentmillis();
		sample.sample_count = sample_count;
		sample.ax = (*ptr_vector)[(i * NUM_FLOATS_PER_IMU_SAMPLE) + 0];
		sample.ay = (*ptr_vector)[(i * NUM_FLOATS_PER_IMU_SAMPLE) + 1];
		sample.az = (*ptr_vector)[(i * NUM_FLOATS_PER_IMU_SAMPLE) + 2];
		sample.gx = (*ptr_vector)[(i * NUM_FLOATS_PER_IMU_SAMPLE) + 3];
		sample.gy = (*ptr_vector)[(i * NUM_FLOATS_PER_IMU_SAMPLE) + 4];
		sample.gz = (*ptr_vector)[(i * NUM_FLOATS_PER_IMU_SAMPLE) + 5];

		ml_feed_sample(sample);

		LOG_DBG("fed line %d at %llu\r\n", i, sample.timestamp);
		LOG_PANIC(); // flush

		// 14.925 Hz
		k_msleep(67);

		// we're already 'downsampling' at 15Hz
		sample_count += ML_15HZ_DOWNSAMPLE_RATE;
	}
}

// feed the ML test vectors thru our ML API's and verify the output
static int ml_test_shell(const struct shell *sh, size_t argc, char **argv)
{
	shell_fprintf(sh, SHELL_NORMAL, "testing ML integration\r\n");

	// this is what sample sets dog size to
	ml_set_dog_size(PET_SIZE_SMALL);

	const char *filename = "ml_test";
	file_handle_t handle = storage_open_file((char *)filename);

	if (handle == NULL) {
		LOG_ERR("failed to open file %s", filename);
		return -1;
	}

	// start the ML sampling
	int ret = ml_start(true, handle);
	if (ret) {
		LOG_ERR("failed to start ML");
		storage_close_file(handle);
		return -1;
	}

	LOG_DBG("feeding trot test data:");
	feed_vectors(&trot_sample15_16_17);

	LOG_DBG("feeding walk test data:");
	feed_vectors(&walk_sample27_28_29);

	// stop the ML sampling
	ret = ml_start(false, handle);
	if (ret) {
		LOG_ERR("failed to stop ML");
		storage_close_file(handle);
		return -1;
	}

	ret = storage_close_file(handle);
	if (ret) {
		LOG_ERR("failed to close file %s", filename);
		return -1;
	}
	LOG_INF("Closed file: %s...", filename);

	activity_record_t record = {0};

	// the 1st record should be a 'trot' activity
	storage_read_activity_record((char *)filename, 0, &record);
	if ((record.activity_data.model_type != Activity) ||
	    (record.activity_data.activity_type != trot)) {
		LOG_ERR("wrong inference data: expected 'trot', model_type=%d, activity_type=%d",
			record.activity_data.model_type, record.activity_data.activity_type);
		return -1;
	}

	// the 2nd is a 'repetition' and the 3rd is another 'trot'.  the 'walk'
	// inferences come after that.
	// TODO: the inference data is different depending on previous state - i.e.,
	// 'initiate()' doesn't seem to reset state.  We need to discuss this with PTC

	// the 4th record should be a 'walk' activity
	storage_read_activity_record((char *)filename, 3, &record);
	if ((record.activity_data.model_type != Activity) ||
	    (record.activity_data.activity_type != walk)) {
		LOG_ERR("wrong inference data: expected 'walk', model_type=%d, activity_type=%d",
			record.activity_data.model_type, record.activity_data.activity_type);
		return -1;
	}
	storage_delete_activity_file((char *)filename);
	LOG_INF("Test passed!");

	return 0;
}

SHELL_CMD_REGISTER(ml_test, NULL, "test ML library", ml_test_shell);
